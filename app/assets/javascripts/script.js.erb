(function(angular) {
  'use strict';
angular.module('demoAngular', [
    'ngAnimate', 
    'ngRoute', 
    'ngMessages', 
    'ngCookies',
    'validation.match'
  ])
  .constant('config', 'http://localhost:3000/api/v1')
  .config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
    $routeProvider.when('/home', {
      templateUrl: "<%= asset_path('home.html') %>",
      controller: 'WelcomeController'
    });
    $routeProvider.when('/about', {
      templateUrl: "<%= asset_path('about.html') %>",
      controller: 'AboutController'
    });
    $routeProvider.when('/login', {
      templateUrl: "<%= asset_path('login.html') %>",
      controller: 'LoginController'
    });
    $routeProvider.when('/signup', {
      templateUrl: "<%= asset_path('signup.html') %>",
      controller: 'SignupController'
    });
    $routeProvider.when('/logout', {
      controller: 'LoginController'
    });

  }])
  .run(['$rootScope', '$location', 'UserService', '$http', '$cookieStore', function($rootScope, $location, UserService, $http, $cookieStore) {

    $rootScope.globals = $cookieStore.get('globals') || {};
    $rootScope.isAuthenticated = $cookieStore.get('isAuthenticated') || false;

    if ($rootScope.globals.currentUser) {
      $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.access_token; 
    }

    $rootScope.$on('$locationChangeStart', function (event, next, current) {

      var restrictedPage = $.inArray($location.path(), ['/home', '/signup', '/login']) === -1;
      var loggedIn = $rootScope.globals.currentUser;
      
      // if (restrictedPage && !loggedIn) {
      //   $location.path('/login');
      // }

      if (loggedIn && !restrictedPage ) {
        $location.path('/about');
      }
    });


  }])
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content');
    var interceptor = ['$rootScope', '$q', function(scope, $q) {
  
      function success( response ) {
        return response
      };

      function error( response ) {
        if ( response.status == 401) {
          var deferred = $q.defer();
          scope.$broadcast('event:unauthorized');
          return deferred.promise;
        };
        return $q.reject( response );
      };
    
      return function( promise ) {
        return promise.then( success, error );
      };
    }];
    $httpProvider.interceptors.push( interceptor );
  }]);

})(window.angular);
